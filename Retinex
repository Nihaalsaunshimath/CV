import os
from PIL import Image
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import torchvision.transforms as transforms
from skimage.metrics import peak_signal_noise_ratio as psnr, structural_similarity as ssim
from pytorch_msssim import MS_SSIM  # Install with pip install pytorch-msssim
import numpy as np
import matplotlib.pyplot as plt

# Dataset Class
class LoLDataset(Dataset):
    def _init_(self, root_dir, subset, transform=None):
        self.image_pairs = []
        self.transform = transform

        subset_dir = os.path.join(root_dir, subset)
        low_dir = os.path.join(subset_dir, 'low')
        high_dir = os.path.join(subset_dir, 'high')

        # Collect low and high image paths
        for file_name in os.listdir(low_dir):
            low_path = os.path.join(low_dir, file_name)
            high_path = os.path.join(high_dir, file_name)
            if os.path.exists(high_path):  # Ensure matching file exists in 'high'
                self.image_pairs.append((low_path, high_path))

    def _len_(self):
        return len(self.image_pairs)

    def _getitem_(self, idx):
        low_path, high_path = self.image_pairs[idx]
        low_image = Image.open(low_path).convert('RGB')
        high_image = Image.open(high_path).convert('RGB')

        if self.transform:
            low_image = self.transform(low_image)
            high_image = self.transform(high_image)

        return low_image, high_image

# Transform
transform = transforms.Compose([
    transforms.Resize((256, 256)),  # Resize for faster training
    transforms.ToTensor()  # Convert to PyTorch tensors
])

# Dataset and Dataloader
root_dir = "E:\\CV-01\\LOLdataset\\lol_dataset\\"  # Replace with your dataset path
train_dataset = LoLDataset(root_dir=root_dir, subset='our485', transform=transform)
test_dataset = LoLDataset(root_dir=root_dir, subset='eval15', transform=transform)
train_dataloader = DataLoader(train_dataset, batch_size=8, shuffle=True)
test_dataloader = DataLoader(test_dataset, batch_size=8, shuffle=False)

# Retinex-inspired Model
class RetinexNet(nn.Module):
    def _init_(self):
        super(RetinexNet, self)._init_()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(32, 3, kernel_size=3, padding=1)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.conv1(x))
        x = self.relu(self.conv2(x))
        x = self.conv3(x)
        return x

# Loss and Optimizer
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = RetinexNet().to(device)
criterion = nn.MSELoss()  # Pixel-wise loss
optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)

# Training Loop
num_epochs = 50
for epoch in range(num_epochs):
    model.train()
    epoch_loss = 0
    for low_image, high_image in train_dataloader:
        low_image, high_image = low_image.to(device), high_image.to(device)

        optimizer.zero_grad()
        output = model(low_image)
        loss = criterion(output, high_image)
        loss.backward()
        optimizer.step()

        epoch_loss += loss.item()
    print(f"Epoch [{epoch + 1}/{num_epochs}], Loss: {epoch_loss / len(train_dataloader)}")

# Evaluation Function
def evaluate(model, dataloader):
    model.eval()
    total_psnr, total_ssim, total_ms_ssim, total_mse, total_mae = 0, 0, 0, 0, 0
    visualized = False  # Flag to control single visualization

    mse_loss = nn.MSELoss()
    mae_loss = nn.L1Loss()
    ms_ssim_module = MS_SSIM(data_range=1.0, size_average=False)  # MS-SSIM

    with torch.no_grad():
        for low_image, high_image in dataloader:
            low_image = low_image.to(device)
            high_image = high_image.to(device)

            # Forward pass
            output = model(low_image)

            # Convert to NumPy for PSNR and SSIM calculations
            output_np = output.cpu().numpy()
            high_image_np = high_image.cpu().numpy()
            low_image_np = low_image.cpu().numpy()

            # Batch metrics calculation
            for i in range(len(output_np)):
                input_img = low_image_np[i].transpose(1, 2, 0)  # Input image
                pred = output_np[i].transpose(1, 2, 0)  # Predicted image
                gt = high_image_np[i].transpose(1, 2, 0)  # Ground truth image

                # Clip to valid range
                pred = np.clip(pred, 0, 1)
                gt = np.clip(gt, 0, 1)

                # Compute PSNR and SSIM
                data_range = gt.max() - gt.min()  # Data range for SSIM
                total_psnr += psnr(gt, pred, data_range=data_range)
                total_ssim += ssim(gt, pred, channel_axis=-1, win_size=min(7, gt.shape[0], gt.shape[1]), data_range=data_range)

                # Visualize only one set of images
                if not visualized:
                    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
                    ax[0].imshow(input_img)
                    ax[0].set_title('Input Image')
                    ax[0].axis('off')

                    ax[1].imshow(pred)
                    ax[1].set_title('Predicted Image')
                    ax[1].axis('off')

                    ax[2].imshow(gt)
                    ax[2].set_title('Ground Truth')
                    ax[2].axis('off')

                    plt.show()
                    visualized = True

            # Compute batch-wise MSE, MAE, and MS-SSIM
            batch_mse = mse_loss(output, high_image).item()
            batch_mae = mae_loss(output, high_image).item()
            batch_ms_ssim = ms_ssim_module(output, high_image).mean().item()

            total_mse += batch_mse * len(output)  # Accumulate for all images
            total_mae += batch_mae * len(output)
            total_ms_ssim += batch_ms_ssim * len(output)

    # Calculate average metrics
    avg_psnr = total_psnr / len(dataloader.dataset)
    avg_ssim = total_ssim / len(dataloader.dataset)
    avg_ms_ssim = total_ms_ssim / len(dataloader.dataset)
    avg_mse = total_mse / len(dataloader.dataset)
    avg_mae = total_mae / len(dataloader.dataset)

    print(f"PSNR: {avg_psnr:.4f}, SSIM: {avg_ssim:.4f}, MS-SSIM: {avg_ms_ssim:.4f}, MSE: {avg_mse:.4f}, MAE: {avg_mae:.4f}")

# Run Evaluation
evaluate(model, test_dataloader)
Retinex
