import os
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader
import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.metrics import peak_signal_noise_ratio as psnr, structural_similarity as ssim
from sklearn.metrics import mean_squared_error, mean_absolute_error
from pytorch_msssim import ssim as msssim  # Install using pip install pytorch-msssim

# Dataset definition
class LowLightDataset(Dataset):
    def _init_(self, high_path, low_path, transform=None):
        self.high_images = sorted([os.path.join(high_path, img) for img in os.listdir(high_path)])
        self.low_images = sorted([os.path.join(low_path, img) for img in os.listdir(low_path)])
        self.transform = transform

    def _len_(self):
        return len(self.high_images)

    def _getitem_(self, idx):
        high_img = cv2.imread(self.high_images[idx])
        low_img = cv2.imread(self.low_images[idx])

        if self.transform:
            high_img = self.transform(high_img)
            low_img = self.transform(low_img)

        return low_img, high_img


# Transform
IMG_SIZE = 256
transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize((IMG_SIZE, IMG_SIZE)),
    transforms.ToTensor()
])

# Paths
train_high_path = "E:\\CV-01\\LOLdataset\\lol_dataset\\our485\\high\\"
train_low_path = "E:\\CV-01\\LOLdataset\\lol_dataset\\our485\\low\\"
test_high_path = "E:\\CV-01\\LOLdataset\\lol_dataset\\eval15\\high\\"
test_low_path = "E:\\CV-01\\LOLdataset\\lol_dataset\\eval15\\low\\"

# Load dataset
train_dataset = LowLightDataset(train_high_path, train_low_path, transform)
test_dataset = LowLightDataset(test_high_path, test_low_path, transform)

train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=1, shuffle=False)


# U-Net Model
class UNet(nn.Module):
    def _init_(self):
        super(UNet, self)._init_()

        def conv_block(in_channels, out_channels):
            return nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
                nn.ReLU(inplace=True),
                nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
                nn.ReLU(inplace=True)
            )

        def up_block(in_channels, out_channels):
            return nn.Sequential(
                nn.ConvTranspose2d(in_channels, out_channels, kernel_size=2, stride=2),
                nn.ReLU(inplace=True)
            )

        # Encoder
        self.enc1 = conv_block(3, 64)
        self.pool1 = nn.MaxPool2d(kernel_size=2)
        self.enc2 = conv_block(64, 128)
        self.pool2 = nn.MaxPool2d(kernel_size=2)

        # Bottleneck
        self.bottleneck = conv_block(128, 256)

        # Decoder
        self.up1 = up_block(256, 128)
        self.dec1 = conv_block(256, 128)
        self.up2 = up_block(128, 64)
        self.dec2 = conv_block(128, 64)

        # Final output layer
        self.final = nn.Conv2d(64, 3, kernel_size=1)

    def forward(self, x):
        # Encoder
        enc1 = self.enc1(x)
        enc2 = self.enc2(self.pool1(enc1))

        # Bottleneck
        bottleneck = self.bottleneck(self.pool2(enc2))

        # Decoder
        up1 = self.up1(bottleneck)
        dec1 = self.dec1(torch.cat([up1, enc2], dim=1))
        up2 = self.up2(dec1)
        dec2 = self.dec2(torch.cat([up2, enc1], dim=1))

        # Final output
        return torch.sigmoid(self.final(dec2))


# Model, loss, and optimizer
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = UNet().to(device)
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=1e-4)

# Training
num_epochs = 20
for epoch in range(num_epochs):
    model.train()
    epoch_loss = 0
    for low_light, ground_truth in train_loader:
        low_light, ground_truth = low_light.to(device), ground_truth.to(device)

        optimizer.zero_grad()
        output = model(low_light)
        loss = criterion(output, ground_truth)
        loss.backward()
        optimizer.step()

        epoch_loss += loss.item()

    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss / len(train_loader):.4f}")


# Testing and evaluation
model.eval()
psnr_values, ssim_values, msssim_values, mae_values, mse_values = [], [], [], [], []

with torch.no_grad():
    for low_light, ground_truth in test_loader:
        low_light, ground_truth = low_light.to(device), ground_truth.to(device)
        predicted = model(low_light).cpu().squeeze(0).permute(1, 2, 0).numpy()
        ground_truth = ground_truth.cpu().squeeze(0).permute(1, 2, 0).numpy()
        low_light = low_light.cpu().squeeze(0).permute(1, 2, 0).numpy()

        # Normalize predicted and ground truth to [0, 1]
        predicted = np.clip(predicted, 0, 1)
        ground_truth = np.clip(ground_truth, 0, 1)

        # Calculate PSNR and SSIM
        psnr_value = psnr(ground_truth, predicted, data_range=1.0)
        ssim_value = ssim(ground_truth, predicted, data_range=1.0, win_size=11, channel_axis=-1)

        # Calculate MS-SSIM
        predicted_tensor = torch.tensor(predicted).unsqueeze(0).unsqueeze(0).float()
        ground_truth_tensor = torch.tensor(ground_truth).unsqueeze(0).unsqueeze(0).float()
        msssim_value = msssim(predicted_tensor, ground_truth_tensor).item()

        # Calculate MAE and MSE
        mae_value = mean_absolute_error(ground_truth.flatten(), predicted.flatten())
        mse_value = mean_squared_error(ground_truth.flatten(), predicted.flatten())

        # Append values to lists
        psnr_values.append(psnr_value)
        ssim_values.append(ssim_value)
        msssim_values.append(msssim_value)
        mae_values.append(mae_value)
        mse_values.append(mse_value)

        # Plot images
        plt.figure(figsize=(15, 5))
        plt.subplot(1, 3, 1)
        plt.imshow(low_light)
        plt.title('Low-Light Image')

        plt.subplot(1, 3, 2)
        plt.imshow(predicted)
        plt.title('Predicted Image')

        plt.subplot(1, 3, 3)
        plt.imshow(ground_truth)
        plt.title('Ground Truth Image')

        plt.show()

# Print Average Scores for all Metrics
print(f"Average PSNR: {np.mean(psnr_values):.4f}")
print(f"Average SSIM: {np.mean(ssim_values):.4f}")
print(f"Average MS-SSIM: {np.mean(msssim_values):.4f}")
print(f"Average MAE: {np.mean(mae_values):.4f}")
print(f"Average MSE: {np.mean(mse_values):.4f}")
